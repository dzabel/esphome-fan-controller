substitutions:
  name: esp32-cam
  friendly_name: esp_cam
esphome:
  name: esp32_camera

esp32:
  board: esp32cam
  framework:
    type: arduino

# enable PSRAM
psram:
  mode: octal
  speed: 80MHz

# Enable logging
logger:
  level: WARN

# default HA integration, OTA updater and backup http web portal
api:
  encryption:
    key: !secret encryption_key
ota:
  - platform: esphome
    password: !secret ota_password
    on_begin:
      then:
        - logger.log: "OTA start"
    on_progress:
      then:
        - logger.log:
            format: "OTA progress %0.1f%%"
            args: ["x"]
    on_end:
      then:
        - logger.log: "OTA end"


text_sensor:

  # Send IP Address
  - platform: wifi_info
    ip_address:
      name: ${friendly_name} IP Addresse

  # Send Uptime in raw seconds
  - platform: template
    name: ${friendly_name} Uptime
    id: uptime_human
    icon: mdi:clock-start

sensor:

  # Send WiFi signal strength & uptime to HA
  - platform: wifi_signal
    name: ${friendly_name} WiFi Signalstärke
    update_interval: 180s

  # This is a bit of overkill. It sends a human readable
  # uptime string 1h 41m 32s instead of 6092 seconds
  - platform: uptime
    name: ${friendly_name} Uptime
    id: uptime_sensor
    update_interval: 180s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            # Custom C++ code to generate the result
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

  - platform: internal_temperature
    name: ${friendly_name} Internal Temperature

wifi:

  # Read the wifi/pass from secrets.yaml:
  # wifi_ssid: "My Wifi XX"
  # wifi_password: "XXXXXXX"
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: !secret wifi_ap_ssid
    password: !secret wifi_ap_password

captive_portal:

# Activates web_server
web_server:
  port: 80

esp32_camera_web_server:
  - port: 8080
    mode: stream
  - port: 8081
    mode: snapshot

# Flashlight
output:
  - platform: gpio
    pin: GPIO4
    id: gpio_4

## GPIO_4 is the flash light pin
light:
  - platform: binary
    output: gpio_4
    name: "Integrated Flash"

# Example configuration entry
esp32_camera:
  name: Cam Keller
  test_pattern: False

  external_clock:
    pin: GPIO0
    frequency: 20MHz
    # frequency: 10MHz

  i2c_pins:
    sda: GPIO26
    scl: GPIO27
  data_pins: [GPIO5, GPIO18, GPIO19, GPIO21, GPIO36, GPIO39, GPIO34, GPIO35]
  vsync_pin: GPIO25
  href_pin: GPIO23
  pixel_clock_pin: GPIO22
  power_down_pin: GPIO32
  # https://de.wikipedia.org/wiki/Bildaufl%C3%B6sung
  # resolution: QQVGA # 160X120  
  # resolution: QCIF # 176X144  
  # resolution: HQVGA # 240X176  
  # resolution: QVGA # 320X240  
  # resolution: CIF # 400X296  
  # resolution: VGA # 640X480  
  # resolution: SVGA # 800X600  
  # resolution: XGA # 1024X768  
  # resolution: SXGA # 1280X1024  
  resolution: UXGA # 1600X1200

  # Image settings
  jpeg_quality: 20
  vertical_flip: False
  horizontal_mirror: False
  max_framerate: 2 fps
  idle_framerate: 0.03 fps
  # (Optional, int): The contrast to apply to the picture, from -2 to 2. Defaults to 0.
  contrast: 0
  # (Optional, int): The brightness to apply to the picture, from -2 to 2. Defaults to 0.
  brightness: 0
  # (Optional, enum): The mode of gain control module. Defaults to auto (leave camera to automatically adjust sensor gain).
  # manual: Gain can be manually set, with agc_value parameter. agc_gain_ceiling has no effect here
  # auto: Camera manage sensor gain automatically. Maximum gain can be defined, thanks to agc_gain_ceiling parameter. agc_value has no effect here
  agc_mode: auto
  # (Optional, int): The gain value to apply to the picture (when aec_mode is set to manual), from 0 to 30. Defaults to 0.
  agc_value: 0
  # (Optional, enum): The maximum gain allowed, when agc_mode is set to auto. This parameter seems act as “ISO” setting. Defaults to 2x.
  # 2x: Camera is less sensitive, picture is clean (without visible noise)
  # 4x
  # 8x
  # 16x
  # 32x
  # 64x
  # 128x: Camera is more sensitive, but picture contain lot of noise
  agc_gain_ceiling: 2x



switch:
  # Expose an ESP32 restart button to HA
  - platform: restart
    name: ${friendly_name} ESP32 Restart
    id: cam_restart

# Restart every day at 0:30am. 
# I've had some memory issues lockup 
# the device after a couple weeks
time:
  - platform: homeassistant
    on_time:
      # Every morning at 12:30am
    - seconds: 0
      minutes: 30
      hours: 0
      then:
       - switch.turn_on: cam_restart