substitutions:
  friendly_name: Growschrank

esphome:
  name: growbox-fan

# Throttle writing parameters to the internal flash memory to reduce ESP memory wear / degradation
preferences:
  flash_write_interval: 15min

 
#########################
# ESP32 AND NETWORK SETUP

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

# pid climate log update is noisy, dial it back to warn
logger:
  level: DEBUG
  logs: 
    dht: DEBUG
    fan: DEBUG

# default HA integration, OTA updater and backup http web portal
api:
ota:
wifi:

  # Read the wifi/pass from secrets.yaml:
  # wifi_ssid: "My Wifi XX"
  # wifi_password: "XXXXXXX"
  ssid: !secret wifi_ssid
  password: !secret wifi_password

number:

  - platform: template
    name: "Fan Speed Override"
    id: fan_speed_override
    internal: false
    max_value: 100.0
    min_value: 0.0
    step: 5.0
    optimistic: true
    mode: slider
    on_value:
      then:
        if:
          condition:
            fan.is_on: growbox_fan_toggle
          then:
          - output.set_level:
              id: growbox_fan_speed
              level: !lambda "return x/100;"

text_sensor:

  # Send IP Address
  - platform: wifi_info
    ip_address:
      name: ${friendly_name} IP Address

  # Send Uptime in raw seconds
  - platform: template
    name: ${friendly_name} Uptime
    id: uptime_human
    icon: mdi:clock-start

sensor:

  # Send WiFi signal strength & uptime to HA
  - platform: wifi_signal
    name: ${friendly_name} WiFi Strength
    update_interval: 60s

  # This is a bit of overkill. It sends a human readable 
  # uptime string 1h 41m 32s instead of 6092 seconds
  - platform: uptime
    name: ${friendly_name} Uptime
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            # Custom C++ code to generate the result
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

  # Read the Tacho PIN and show measured RPM as a sensor (only with 4-pin PWM fans!)

  - platform: pulse_counter
    pin: 
      number: GPIO25   # Connect to any input PIN on the ESP
      mode: INPUT_PULLUP
    unit_of_measurement: 'RPM'
    id: fan_speed
    name: ${friendly_name} Fan Speed
    accuracy_decimals: 0
    filters:
      - multiply: 1.41  # Depending on how many pulses the fan sends per round - should be 0.5 or 1 - try...
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    update_interval: 10s

  # GET TEMP/HUMIDITY FROM DHT11
  - platform: dht
    pin: GPIO18
    model: DHT11
    temperature:
      name: "${friendly_name} Temperatur"
      id: growbox_fan_temperature
      accuracy_decimals: 3
      on_value:
          then:
            - output.set_level:
                id: growbox_fan_speed
                level: !lambda |-
                  if (id(growbox_fan_temperature).state < 20) {
                    ESP_LOGI( "speed_level", "speed: 0 (below 20)");
                    auto call = id(growbox_fan_toggle).turn_off();
                    call.perform();
                    return 0;
                  } else if (id(growbox_fan_temperature).state > 25) {
                    ESP_LOGI( "speed_level", "speed: %f (above 25)", 100);
                    if (id(growbox_fan_toggle).state) {
                      // Fan is ON, do something here
                      ESP_LOGD( "fan_control", "FAN is already ON");
                    } else {
                      // Fan is OFF, do something else here
                      ESP_LOGD( "fan_control", "FAN is OFF, switch on.");
                      auto call = id(growbox_fan_toggle).turn_on();
                      call.perform();
                    }
                    return 100;
                  } else {
                    float speed_level = 5+(95*pow(2.71828,(id(growbox_fan_temperature).state-25))/(pow(2.71828,5)));
                    ESP_LOGI( "TEST: speed_level", "speed: %f", speed_level);
                    if (id(growbox_fan_toggle).state) {
                      // Fan is ON, do something here
                      ESP_LOGD( "fan_control", "FAN is already ON");
                    } else {
                      // Fan is OFF, do something else here
                      ESP_LOGD( "fan_control", "FAN is OFF, switch on.");
                      auto call = id(growbox_fan_toggle).turn_on();
                      call.perform();
                    }
                    return speed_level;
                  }
            - delay: 2s
        

      # If you don't smooth the temperature readings 
      # the PID controller over reacts to small changes.
      filters:
        - offset: -1.2
        - exponential_moving_average:  
            alpha: 0.1
            send_every: 1

    humidity:
      name: "${friendly_name} Luftfeuchtigkeit"
      id: growbox_fan_humidity
      filters:
        - offset: -2

    # the DHT11 can only be read every 1s. Use 2s to be safe.
    update_interval: 5s

      # GET TEMP/HUMIDITY FROM DHT11
  - platform: dht
    pin: GPIO33
    model: DHT11
    temperature:
      name: "${friendly_name} Temperatur Outside"
      id: growbox_fan_temperature_outside
      accuracy_decimals: 3

      # If you don't smooth the temperature readings 
      # the PID controller over reacts to small changes.
      filters:
        - exponential_moving_average:  
            alpha: 0.1
            send_every: 1

    humidity:
      name: "${friendly_name} Luftfeuchtigkeit Outside"
      id: growbox_fan_humidity_outside
      filters:
        - offset: -7

    # the DHT11 can only be read every 1s. Use 2s to be safe.
    update_interval: 5s

output:
  # Wire this pin (13) into the PWM pin of your 12v fan
  # ledc is the name of the pwm output system on an esp32
  - platform: ledc
    id: growbox_fan_speed
    pin: GPIO27

    #frequency: "25000 Hz" # 25KHz is standard PC fan frequency, minimises buzzing
    frequency: 22.5kHz #Pulse the fan fast to prevent noise

    # my fans stop working below 13% powerful.
    # also they're  powerful and loud, cap their max speed to 80%
    min_power: 0%
    max_power: 100%

fan:
  - platform: speed
    output: growbox_fan_speed
    name: ${friendly_name} Override Enable
    id: growbox_fan_toggle

switch:
  # Expose an ESP32 restart button to HA
  - platform: restart
    name: ${friendly_name} ESP32 Restart
    id: growbox_fan_restart

# Restart every day at 12:30am. 
# I've had some memory issues lockup 
# the device after a couple weeks
time:
  - platform: homeassistant
    on_time:
      # Every morning at 12:30am
    - seconds: 0
      minutes: 30
      hours: 0
      then:
       - switch.turn_on: growbox_fan_restart
    